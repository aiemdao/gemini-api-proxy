import fs from "fs";
import path from "path";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export default async function handler(req, res) {
  // ---- B·∫≠t CORS ----
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    // ---- Parse body an to√†n ----
    let body = {};
    try {
      body = typeof req.body === "string" ? JSON.parse(req.body) : req.body;
    } catch (e) {
      console.error("‚ùå JSON parse error:", e);
      return res.status(400).json({ error: "Invalid JSON format" });
    }

    const { prescription, query } = body;
    const input = prescription || query;

    if (!input) {
      return res.status(400).json({ error: "Missing 'prescription' or 'query' in body" });
    }

    // ---- ƒê·ªçc file RAG ----
    const ragPath = path.join(process.cwd(), "data", "DDI_Rheumatology.md");
    const ragData = fs.readFileSync(ragPath, "utf-8");

    // ---- Chu·∫©n b·ªã prompt ----
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω y khoa.
S·ª≠ d·ª•ng d·ªØ li·ªáu t∆∞∆°ng t√°c thu·ªëc sau ƒë·ªÉ ph√¢n t√≠ch ƒë∆°n thu·ªëc.
N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p, h√£y n√≥i "Kh√¥ng c√≥ d·ªØ li·ªáu trong t√†i li·ªáu".

### D·ªØ li·ªáu RAG:
${ragData}

### ƒê∆°n thu·ªëc b·ªánh nh√¢n:
${input}

### Nhi·ªám v·ª•:
- Li·ªát k√™ c√°c t∆∞∆°ng t√°c thu·ªëc c√≥ th·ªÉ x·∫£y ra.
- Ghi r√µ m·ª©c ƒë·ªô (üö® N·∫∑ng / üö¶ Trung b√¨nh).
- ƒê∆∞a khuy·∫øn c√°o ng·∫Øn g·ªçn.
`;

    const result = await model.generateContent(prompt);
    const text = result.response.text();

    res.status(200).json({ analysis: text });
  } catch (error) {
    console.error("‚ùå Gemini API Error:", error);
    res.status(500).json({ error: error.message });
  }
}

